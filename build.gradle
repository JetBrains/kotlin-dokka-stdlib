plugins {
  id "de.undercouch.download" version "3.4.3"
  id 'com.github.jk1.tcdeps' version '0.17'
}


configurations {
  dokka
  kotlin_sources
}

final String dokka_build = "611"
final String dokka_version = "0.10.2-SNAPSHOT"

repositories {
  mavenLocal()
  maven { url = "https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_Dokka_DokkaAntMavenGradle/$dokka_build/maven"  }
}

dependencies {
  dokka "org.jetbrains.dokka:dokka-fatjar:$dokka_version"
}

final File dokkaHome = new File(buildDir, "dokka-home")
task setupDokka(type: Sync) {
  from configurations.dokka
  into dokkaHome
}

task extractAll(dependsOn: [setupDokka])

extractAll.dependsOn ':kotlin_big:extractLibs'
extractAll.dependsOn ':kotlin_big:extractSources'
extractAll.dependsOn ':kotlin_big:extractKotlinSources'
extractAll.dependsOn ':kotlin_native:extractKotlinNative'
extractAll.dependsOn ':ant:extractAnt'

def pAnt() { return project(':ant').extensions }
def pKotlinBig() { return project(':kotlin_big').extensions }
def pKotlinNative() { return project(':kotlin_native').extensions }

task cleanupSources(type: Delete) {
  dependsOn extractAll
  doFirst {
    def base = file("${pKotlinNative().kotlin_native_root}/runtime/src/main/kotlin")
    delete(files("$base/kotlin/Functions.kt", "$base/kotlin/coroutines/SuspendFunctions.kt",
            "$base/kotlin/reflect/KFunctions.kt"))
  }
}

task setupCallDokka() { }
task callDokka(type: Exec, dependsOn: [extractAll, setupCallDokka, cleanupSources]) {
  workingDir = projectDir
  // -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005
  environment("ANT_OPTS", "-Xmx3G")
  environment("JAVA_HOME", System.getProperty("java.home"))
  doFirst {
    def logFile = file("$buildDir/dokka.log")
    standardOutput = new org.apache.tools.ant.util.TeeOutputStream(standardOutput, new FileOutputStream(logFile))
  }
}

setupCallDokka.doLast {
  
  callDokka.commandLine = [
          pAnt().ant_exe.path,
          "-f", file("build-docs.xml").path,
          "v2",
          "-Dkotlin_root=${pKotlinBig().kotlin_root}",
          "-Dkotlin_sources=${pKotlinBig().kotlin_sources}",
          "-Dkotlin_libs=${pKotlinBig().kotlin_libs}",
          "-Dkotlin_native_root=${pKotlinNative().kotlin_native_root}",
          "-Dkotlin_native_linux=${pKotlinNative().kotlin_native_bin_linux}",
          "-Dkotlin_native_windows=${pKotlinNative().kotlin_native_bin_windows}",
          "-Dkotlin_native_mac=${pKotlinNative().kotlin_native_bin_mac}",
  ]
}
